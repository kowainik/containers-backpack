signature Map
          ( -- * Types
            Map
          , Key

            -- * Construction
          , empty
          , singleton
          , fromList

            -- * Query
          , null
          , size
          , member
          , lookup
          , lookupDefault

            -- * Conversion
--          , toList
--          , keys
          , elems
          ) where

import Prelude hiding (lookup, null)

data Map k v
class Key k

instance (Show k, Show v) => Show (Map k v)

empty         :: Map k v
singleton     :: Key k => k -> v -> Map k v
fromList      :: Key k => [(k, v)] -> Map k v

-- TODO: construction from corresponding sets

null          :: Map k v -> Bool
size          :: Map k v -> Int
member        :: Key k => k -> Map k a -> Bool
lookup        :: Key k => k -> Map k v -> Maybe v
lookupDefault :: Key k => v -> k -> Map k v -> v

-- TODO: these two functions require constraints
-- toList :: Key k => Map k v -> [(k, v)]
-- keys   :: Key k => Map k v -> [k]
elems  :: Map k v -> [v]

-- TODO: union, difference, intersection
-- TODO: folds and traversals
-- TODO: filters, map

-- infixl 9 !?
-- (!?) :: Key k => Map k v -> k -> Maybe v
-- (!?) m k = lookup k m
